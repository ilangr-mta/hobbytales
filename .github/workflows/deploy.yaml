name: Deploy to Production

on:
  pull_request:
    branches:
      - main
  # push:
  #   branches:
  #     - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH with EC2 key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 400 ~/.ssh/ec2_key.pem
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          
      - name: Check SSH connection and sudo access
        run: |
          echo "Testing SSH connection and sudo access..."
          ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'sudo -n echo "Sudo access confirmed"'
          

      - name: Deploy via rsync
        run: |
          # backend → /var/www/app/
          rsync -avz \
            -e "ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no" \
            --rsync-path="sudo rsync" \
            --exclude 'entries.json' \
            backend/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/var/www/app/

          # frontend → /var/www/app/static/
          rsync -avz \
            -e "ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no" \
            --rsync-path="sudo rsync" \
            frontend/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/var/www/app/static/
          
      - name: Restart Apache
        run: |
          echo "Restarting Apache..."
          ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'sudo systemctl restart httpd || echo "Apache restart failed"'
          
      - name: Verify deployment
        run: |
          echo "Verifying API is accessible..."
          
          # Wait for a few seconds to allow Apache to fully restart
          sleep 5
          
          # Check API health endpoint returns 200
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 5 http://${{ secrets.SERVER_IP }}/api/health)
          if [ "$HEALTH_STATUS" -eq 200 ]; then
            echo "✅ Health endpoint returned 200 OK"
          else
            echo "❌ Health endpoint returned $HEALTH_STATUS"
            exit 1
          fi
          
          # Check the main API endpoint returns 200
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 5 http://${{ secrets.SERVER_IP }}/api/entries)
          if [ "$API_STATUS" -eq 200 ]; then
            echo "✅ API endpoint returned 200 OK"
          else
            echo "❌ API endpoint returned $API_STATUS"
            exit 1
          fi
          
          echo "Deployment verification successful!"